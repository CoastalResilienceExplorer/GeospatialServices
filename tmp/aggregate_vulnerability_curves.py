import pandas as pd
import geopandas as gpd
from collections import OrderedDict

def getFirstWordMapping(arr, word_mapping, fallback=0):
        for el in arr:
            if el in word_mapping.keys():
                return word_mapping[el]
        return fallback

def extract_stories(description):
    word_mapping = OrderedDict()
    word_mapping['one'] = 1
    word_mapping['two'] = 2
    word_mapping['three'] = 3
    word_mapping['1to2'] = 2
    word_mapping['split'] = 2

    description = description.lower().replace(',', ' ').split()
    for breakword in ('floor', 'floors', 'story', 'stories', 'level'):
        try:
            description = description[0: description.index(breakword)]
        except ValueError:
            continue
        tmp_floors = getFirstWordMapping(description, word_mapping)
        if tmp_floors > 0:
            return tmp_floors
    return 1
        
def extract_basement(description):
    word_mapping = OrderedDict()
    word_mapping['w/'] = 'WB'
    word_mapping['no'] = 'NB'

    description = description.lower().replace(',', ' ').split()
    try:
        description = description[0: description.index('basement')]
    except ValueError:
        return 'NB'
    tmp_basement = getFirstWordMapping(description, word_mapping, 'NB')
    return tmp_basement


ddfs = pd.read_csv("./flBldgStructDmgFn-Table 1.csv")
damage_columns = [c for c in ddfs.columns if c[0:2] == "ft" and c[-1] != "m"]
ddfs['nstories'] = ddfs['Description'].apply(lambda x: extract_stories(x))
ddfs['basement'] = ddfs['Description'].apply(lambda x: extract_basement(x))

cols = ["Occupancy", 'nstories', 'basement']


# 0.3048 converts feet to meters
ddfs = ddfs[cols + damage_columns].groupby(cols).median().reset_index()
column_name_mapping = {
    c: c.replace("ft", "m").replace(
        c[2:4], str(
            round(int(c[2:4]) * 0.3048,1)
        ))
    for c in damage_columns
}
ddfs = ddfs.rename(columns=column_name_mapping)

nsi_occtypes = [i.split('-')[0] for i in ['RES3C', 'RES4', 'COM4', 'COM5', 'IND3', 'RES1-1SNB', 'COM1', 'COM8', 'RES1-2SWB',
 'RES1-2SNB', 'RES3D', 'COM10', 'REL1', 'AGR1', 'RES1-1SWB', 'COM2', 'IND6',
 'IND1', 'RES3A', 'RES1-3SWB', 'COM3', 'RES3B', 'RES1-3SNB', 'COM7', 'IND2',
 'IND5', 'RES2', 'EDU1', 'RES3F', 'GOV1', 'RES6', 'RES3E', 'RES5', 'EDU2', 'COM6',
 'GOV2', 'IND4', 'COM9']]

fast_types = ddfs.Occupancy.apply(lambda x: x.replace(' ', '').split('-')[0]).unique()
print(fast_types)
for t in nsi_occtypes:
    print(t)
    if t in ("RES3A", "RES3B", "RES3C", "RES3D", "RES3E", "RES3F", "RES4"):
        continue
    assert (t in fast_types), f"{t} not in FAST"

ddfs['DerivedOccType'] = ddfs['Occupancy'].apply(lambda x: x.replace(' ', '')) + \
    ddfs['nstories'].apply(lambda x: '-'+str(x)) + \
    ddfs['basement'].apply(lambda x: '-'+str(x))

ddfs.to_csv('./nsi_median_vulnerability_curves.csv')
